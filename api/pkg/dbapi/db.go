// Package dbapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package dbapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateGroupGroupsPost request
	CreateGroupGroupsPost(ctx context.Context, params *CreateGroupGroupsPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupInfosGroupsGroupIdGet request
	GetGroupInfosGroupsGroupIdGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRecommendationsGroupsGroupIdRecommendationsGet request
	GetGroupRecommendationsGroupsGroupIdRecommendationsGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddGroupRecommendationsGroupsGroupIdRecommendationsPost request
	AddGroupRecommendationsGroupsGroupIdRecommendationsPost(ctx context.Context, groupId int, params *AddGroupRecommendationsGroupsGroupIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupTastesGroupsGroupIdTastesGet request
	GetGroupTastesGroupsGroupIdTastesGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDelete request
	RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDelete(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTasteForGroupGroupsGroupIdTastesGenreIdPost request
	AddTasteForGroupGroupsGroupIdTastesGenreIdPost(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupUsersGroupsGroupIdUsersGet request
	GetGroupUsersGroupsGroupIdUsersGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromGroupGroupsGroupIdUsersUserIdDelete request
	RemoveUserFromGroupGroupsGroupIdUsersUserIdDelete(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserToGroupGroupsGroupIdUsersUserIdPost request
	AddUserToGroupGroupsGroupIdUsersUserIdPost(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserUsersPost request
	CreateUserUsersPost(ctx context.Context, params *CreateUserUsersPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfosByMailUsersEmailBymailGet request
	GetUserInfosByMailUsersEmailBymailGet(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserUsersUserIdDelete request
	RemoveUserUsersUserIdDelete(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfosUsersUserIdGet request
	GetUserInfosUsersUserIdGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserInfosUsersUserIdPost request
	AddUserInfosUsersUserIdPost(ctx context.Context, userId int, params *AddUserInfosUsersUserIdPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeenMoviesUsersUserIdMoviesGet request
	GetSeenMoviesUsersUserIdMoviesGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDelete request
	RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDelete(ctx context.Context, userId int, movieId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMovieToWatchedUsersUserIdMoviesMovieIdPost request
	AddMovieToWatchedUsersUserIdMoviesMovieIdPost(ctx context.Context, userId int, movieId int, params *AddMovieToWatchedUsersUserIdMoviesMovieIdPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecommendationsUsersUserIdRecommendationsGet request
	GetRecommendationsUsersUserIdRecommendationsGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRecommendationsUsersUserIdRecommendationsPost request
	AddRecommendationsUsersUserIdRecommendationsPost(ctx context.Context, userId int, params *AddRecommendationsUsersUserIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTastesUsersUserIdTastesGet request
	GetTastesUsersUserIdTastesGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTasteFromUserUsersUserIdTastesGenreIdDelete request
	RemoveTasteFromUserUsersUserIdTastesGenreIdDelete(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTasteForUserUsersUserIdTastesGenreIdPost request
	AddTasteForUserUsersUserIdTastesGenreIdPost(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateGroupGroupsPost(ctx context.Context, params *CreateGroupGroupsPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupGroupsPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupInfosGroupsGroupIdGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupInfosGroupsGroupIdGetRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRecommendationsGroupsGroupIdRecommendationsGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRecommendationsGroupsGroupIdRecommendationsGetRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGroupRecommendationsGroupsGroupIdRecommendationsPost(ctx context.Context, groupId int, params *AddGroupRecommendationsGroupsGroupIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGroupRecommendationsGroupsGroupIdRecommendationsPostRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupTastesGroupsGroupIdTastesGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupTastesGroupsGroupIdTastesGetRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDelete(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteRequest(c.Server, groupId, genreId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTasteForGroupGroupsGroupIdTastesGenreIdPost(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTasteForGroupGroupsGroupIdTastesGenreIdPostRequest(c.Server, groupId, genreId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupUsersGroupsGroupIdUsersGet(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupUsersGroupsGroupIdUsersGetRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromGroupGroupsGroupIdUsersUserIdDelete(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteRequest(c.Server, groupId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserToGroupGroupsGroupIdUsersUserIdPost(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserToGroupGroupsGroupIdUsersUserIdPostRequest(c.Server, groupId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserUsersPost(ctx context.Context, params *CreateUserUsersPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserUsersPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfosByMailUsersEmailBymailGet(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfosByMailUsersEmailBymailGetRequest(c.Server, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserUsersUserIdDelete(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserUsersUserIdDeleteRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfosUsersUserIdGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfosUsersUserIdGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserInfosUsersUserIdPost(ctx context.Context, userId int, params *AddUserInfosUsersUserIdPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserInfosUsersUserIdPostRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeenMoviesUsersUserIdMoviesGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeenMoviesUsersUserIdMoviesGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDelete(ctx context.Context, userId int, movieId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteRequest(c.Server, userId, movieId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMovieToWatchedUsersUserIdMoviesMovieIdPost(ctx context.Context, userId int, movieId int, params *AddMovieToWatchedUsersUserIdMoviesMovieIdPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMovieToWatchedUsersUserIdMoviesMovieIdPostRequest(c.Server, userId, movieId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecommendationsUsersUserIdRecommendationsGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecommendationsUsersUserIdRecommendationsGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRecommendationsUsersUserIdRecommendationsPost(ctx context.Context, userId int, params *AddRecommendationsUsersUserIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRecommendationsUsersUserIdRecommendationsPostRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTastesUsersUserIdTastesGet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTastesUsersUserIdTastesGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTasteFromUserUsersUserIdTastesGenreIdDelete(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTasteFromUserUsersUserIdTastesGenreIdDeleteRequest(c.Server, userId, genreId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTasteForUserUsersUserIdTastesGenreIdPost(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTasteForUserUsersUserIdTastesGenreIdPostRequest(c.Server, userId, genreId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateGroupGroupsPostRequest generates requests for CreateGroupGroupsPost
func NewCreateGroupGroupsPostRequest(server string, params *CreateGroupGroupsPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gp_name", runtime.ParamLocationQuery, params.GpName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupInfosGroupsGroupIdGetRequest generates requests for GetGroupInfosGroupsGroupIdGet
func NewGetGroupInfosGroupsGroupIdGetRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRecommendationsGroupsGroupIdRecommendationsGetRequest generates requests for GetGroupRecommendationsGroupsGroupIdRecommendationsGet
func NewGetGroupRecommendationsGroupsGroupIdRecommendationsGetRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/recommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddGroupRecommendationsGroupsGroupIdRecommendationsPostRequest generates requests for AddGroupRecommendationsGroupsGroupIdRecommendationsPost
func NewAddGroupRecommendationsGroupsGroupIdRecommendationsPostRequest(server string, groupId int, params *AddGroupRecommendationsGroupsGroupIdRecommendationsPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/recommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movie_id", runtime.ParamLocationQuery, params.MovieId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accuracy", runtime.ParamLocationQuery, params.Accuracy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupTastesGroupsGroupIdTastesGetRequest generates requests for GetGroupTastesGroupsGroupIdTastesGet
func NewGetGroupTastesGroupsGroupIdTastesGetRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/tastes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteRequest generates requests for RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDelete
func NewRemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteRequest(server string, groupId int, genreId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "genre_id", runtime.ParamLocationPath, genreId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/tastes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTasteForGroupGroupsGroupIdTastesGenreIdPostRequest generates requests for AddTasteForGroupGroupsGroupIdTastesGenreIdPost
func NewAddTasteForGroupGroupsGroupIdTastesGenreIdPostRequest(server string, groupId int, genreId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "genre_id", runtime.ParamLocationPath, genreId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/tastes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupUsersGroupsGroupIdUsersGetRequest generates requests for GetGroupUsersGroupsGroupIdUsersGet
func NewGetGroupUsersGroupsGroupIdUsersGetRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteRequest generates requests for RemoveUserFromGroupGroupsGroupIdUsersUserIdDelete
func NewRemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteRequest(server string, groupId int, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserToGroupGroupsGroupIdUsersUserIdPostRequest generates requests for AddUserToGroupGroupsGroupIdUsersUserIdPost
func NewAddUserToGroupGroupsGroupIdUsersUserIdPostRequest(server string, groupId int, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserUsersPostRequest generates requests for CreateUserUsersPost
func NewCreateUserUsersPostRequest(server string, params *CreateUserUsersPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mail", runtime.ParamLocationQuery, params.Mail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInfosByMailUsersEmailBymailGetRequest generates requests for GetUserInfosByMailUsersEmailBymailGet
func NewGetUserInfosByMailUsersEmailBymailGetRequest(server string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/bymail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserUsersUserIdDeleteRequest generates requests for RemoveUserUsersUserIdDelete
func NewRemoveUserUsersUserIdDeleteRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInfosUsersUserIdGetRequest generates requests for GetUserInfosUsersUserIdGet
func NewGetUserInfosUsersUserIdGetRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserInfosUsersUserIdPostRequest generates requests for AddUserInfosUsersUserIdPost
func NewAddUserInfosUsersUserIdPostRequest(server string, userId int, params *AddUserInfosUsersUserIdPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeenMoviesUsersUserIdMoviesGetRequest generates requests for GetSeenMoviesUsersUserIdMoviesGet
func NewGetSeenMoviesUsersUserIdMoviesGetRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/movies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteRequest generates requests for RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDelete
func NewRemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteRequest(server string, userId int, movieId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "movie_id", runtime.ParamLocationPath, movieId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/movies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMovieToWatchedUsersUserIdMoviesMovieIdPostRequest generates requests for AddMovieToWatchedUsersUserIdMoviesMovieIdPost
func NewAddMovieToWatchedUsersUserIdMoviesMovieIdPostRequest(server string, userId int, movieId int, params *AddMovieToWatchedUsersUserIdMoviesMovieIdPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "movie_id", runtime.ParamLocationPath, movieId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/movies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rating", runtime.ParamLocationQuery, params.Rating); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecommendationsUsersUserIdRecommendationsGetRequest generates requests for GetRecommendationsUsersUserIdRecommendationsGet
func NewGetRecommendationsUsersUserIdRecommendationsGetRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/recommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRecommendationsUsersUserIdRecommendationsPostRequest generates requests for AddRecommendationsUsersUserIdRecommendationsPost
func NewAddRecommendationsUsersUserIdRecommendationsPostRequest(server string, userId int, params *AddRecommendationsUsersUserIdRecommendationsPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/recommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movie_id", runtime.ParamLocationQuery, params.MovieId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accuracy", runtime.ParamLocationQuery, params.Accuracy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTastesUsersUserIdTastesGetRequest generates requests for GetTastesUsersUserIdTastesGet
func NewGetTastesUsersUserIdTastesGetRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tastes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveTasteFromUserUsersUserIdTastesGenreIdDeleteRequest generates requests for RemoveTasteFromUserUsersUserIdTastesGenreIdDelete
func NewRemoveTasteFromUserUsersUserIdTastesGenreIdDeleteRequest(server string, userId int, genreId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "genre_id", runtime.ParamLocationPath, genreId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tastes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTasteForUserUsersUserIdTastesGenreIdPostRequest generates requests for AddTasteForUserUsersUserIdTastesGenreIdPost
func NewAddTasteForUserUsersUserIdTastesGenreIdPostRequest(server string, userId int, genreId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "genre_id", runtime.ParamLocationPath, genreId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tastes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateGroupGroupsPostWithResponse request
	CreateGroupGroupsPostWithResponse(ctx context.Context, params *CreateGroupGroupsPostParams, reqEditors ...RequestEditorFn) (*CreateGroupGroupsPostResponse, error)

	// GetGroupInfosGroupsGroupIdGetWithResponse request
	GetGroupInfosGroupsGroupIdGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupInfosGroupsGroupIdGetResponse, error)

	// GetGroupRecommendationsGroupsGroupIdRecommendationsGetWithResponse request
	GetGroupRecommendationsGroupsGroupIdRecommendationsGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse, error)

	// AddGroupRecommendationsGroupsGroupIdRecommendationsPostWithResponse request
	AddGroupRecommendationsGroupsGroupIdRecommendationsPostWithResponse(ctx context.Context, groupId int, params *AddGroupRecommendationsGroupsGroupIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse, error)

	// GetGroupTastesGroupsGroupIdTastesGetWithResponse request
	GetGroupTastesGroupsGroupIdTastesGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupTastesGroupsGroupIdTastesGetResponse, error)

	// RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteWithResponse request
	RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteWithResponse(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse, error)

	// AddTasteForGroupGroupsGroupIdTastesGenreIdPostWithResponse request
	AddTasteForGroupGroupsGroupIdTastesGenreIdPostWithResponse(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse, error)

	// GetGroupUsersGroupsGroupIdUsersGetWithResponse request
	GetGroupUsersGroupsGroupIdUsersGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupUsersGroupsGroupIdUsersGetResponse, error)

	// RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteWithResponse request
	RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteWithResponse(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse, error)

	// AddUserToGroupGroupsGroupIdUsersUserIdPostWithResponse request
	AddUserToGroupGroupsGroupIdUsersUserIdPostWithResponse(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*AddUserToGroupGroupsGroupIdUsersUserIdPostResponse, error)

	// CreateUserUsersPostWithResponse request
	CreateUserUsersPostWithResponse(ctx context.Context, params *CreateUserUsersPostParams, reqEditors ...RequestEditorFn) (*CreateUserUsersPostResponse, error)

	// GetUserInfosByMailUsersEmailBymailGetWithResponse request
	GetUserInfosByMailUsersEmailBymailGetWithResponse(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*GetUserInfosByMailUsersEmailBymailGetResponse, error)

	// RemoveUserUsersUserIdDeleteWithResponse request
	RemoveUserUsersUserIdDeleteWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*RemoveUserUsersUserIdDeleteResponse, error)

	// GetUserInfosUsersUserIdGetWithResponse request
	GetUserInfosUsersUserIdGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserInfosUsersUserIdGetResponse, error)

	// AddUserInfosUsersUserIdPostWithResponse request
	AddUserInfosUsersUserIdPostWithResponse(ctx context.Context, userId int, params *AddUserInfosUsersUserIdPostParams, reqEditors ...RequestEditorFn) (*AddUserInfosUsersUserIdPostResponse, error)

	// GetSeenMoviesUsersUserIdMoviesGetWithResponse request
	GetSeenMoviesUsersUserIdMoviesGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetSeenMoviesUsersUserIdMoviesGetResponse, error)

	// RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteWithResponse request
	RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteWithResponse(ctx context.Context, userId int, movieId int, reqEditors ...RequestEditorFn) (*RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse, error)

	// AddMovieToWatchedUsersUserIdMoviesMovieIdPostWithResponse request
	AddMovieToWatchedUsersUserIdMoviesMovieIdPostWithResponse(ctx context.Context, userId int, movieId int, params *AddMovieToWatchedUsersUserIdMoviesMovieIdPostParams, reqEditors ...RequestEditorFn) (*AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse, error)

	// GetRecommendationsUsersUserIdRecommendationsGetWithResponse request
	GetRecommendationsUsersUserIdRecommendationsGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetRecommendationsUsersUserIdRecommendationsGetResponse, error)

	// AddRecommendationsUsersUserIdRecommendationsPostWithResponse request
	AddRecommendationsUsersUserIdRecommendationsPostWithResponse(ctx context.Context, userId int, params *AddRecommendationsUsersUserIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*AddRecommendationsUsersUserIdRecommendationsPostResponse, error)

	// GetTastesUsersUserIdTastesGetWithResponse request
	GetTastesUsersUserIdTastesGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetTastesUsersUserIdTastesGetResponse, error)

	// RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteWithResponse request
	RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteWithResponse(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse, error)

	// AddTasteForUserUsersUserIdTastesGenreIdPostWithResponse request
	AddTasteForUserUsersUserIdTastesGenreIdPostWithResponse(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*AddTasteForUserUsersUserIdTastesGenreIdPostResponse, error)
}

type CreateGroupGroupsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateGroupGroupsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupGroupsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupInfosGroupsGroupIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetGroupInfosGroupsGroupIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupInfosGroupsGroupIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieReccomendationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupTastesGroupsGroupIdTastesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GenreResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetGroupTastesGroupsGroupIdTastesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupTastesGroupsGroupIdTastesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupUsersGroupsGroupIdUsersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]int
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetGroupUsersGroupsGroupIdUsersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupUsersGroupsGroupIdUsersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserToGroupGroupsGroupIdUsersUserIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddUserToGroupGroupsGroupIdUsersUserIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserToGroupGroupsGroupIdUsersUserIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserUsersPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateUserUsersPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserUsersPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfosByMailUsersEmailBymailGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetUserInfosByMailUsersEmailBymailGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfosByMailUsersEmailBymailGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserUsersUserIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveUserUsersUserIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserUsersUserIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfosUsersUserIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetUserInfosUsersUserIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfosUsersUserIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserInfosUsersUserIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddUserInfosUsersUserIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserInfosUsersUserIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeenMoviesUsersUserIdMoviesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetSeenMoviesUsersUserIdMoviesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeenMoviesUsersUserIdMoviesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecommendationsUsersUserIdRecommendationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieReccomendationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetRecommendationsUsersUserIdRecommendationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecommendationsUsersUserIdRecommendationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRecommendationsUsersUserIdRecommendationsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddRecommendationsUsersUserIdRecommendationsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRecommendationsUsersUserIdRecommendationsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTastesUsersUserIdTastesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GenreResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTastesUsersUserIdTastesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTastesUsersUserIdTastesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTasteForUserUsersUserIdTastesGenreIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddTasteForUserUsersUserIdTastesGenreIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTasteForUserUsersUserIdTastesGenreIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateGroupGroupsPostWithResponse request returning *CreateGroupGroupsPostResponse
func (c *ClientWithResponses) CreateGroupGroupsPostWithResponse(ctx context.Context, params *CreateGroupGroupsPostParams, reqEditors ...RequestEditorFn) (*CreateGroupGroupsPostResponse, error) {
	rsp, err := c.CreateGroupGroupsPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupGroupsPostResponse(rsp)
}

// GetGroupInfosGroupsGroupIdGetWithResponse request returning *GetGroupInfosGroupsGroupIdGetResponse
func (c *ClientWithResponses) GetGroupInfosGroupsGroupIdGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupInfosGroupsGroupIdGetResponse, error) {
	rsp, err := c.GetGroupInfosGroupsGroupIdGet(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupInfosGroupsGroupIdGetResponse(rsp)
}

// GetGroupRecommendationsGroupsGroupIdRecommendationsGetWithResponse request returning *GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse
func (c *ClientWithResponses) GetGroupRecommendationsGroupsGroupIdRecommendationsGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse, error) {
	rsp, err := c.GetGroupRecommendationsGroupsGroupIdRecommendationsGet(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse(rsp)
}

// AddGroupRecommendationsGroupsGroupIdRecommendationsPostWithResponse request returning *AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse
func (c *ClientWithResponses) AddGroupRecommendationsGroupsGroupIdRecommendationsPostWithResponse(ctx context.Context, groupId int, params *AddGroupRecommendationsGroupsGroupIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse, error) {
	rsp, err := c.AddGroupRecommendationsGroupsGroupIdRecommendationsPost(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse(rsp)
}

// GetGroupTastesGroupsGroupIdTastesGetWithResponse request returning *GetGroupTastesGroupsGroupIdTastesGetResponse
func (c *ClientWithResponses) GetGroupTastesGroupsGroupIdTastesGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupTastesGroupsGroupIdTastesGetResponse, error) {
	rsp, err := c.GetGroupTastesGroupsGroupIdTastesGet(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupTastesGroupsGroupIdTastesGetResponse(rsp)
}

// RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteWithResponse request returning *RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse
func (c *ClientWithResponses) RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteWithResponse(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse, error) {
	rsp, err := c.RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDelete(ctx, groupId, genreId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse(rsp)
}

// AddTasteForGroupGroupsGroupIdTastesGenreIdPostWithResponse request returning *AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse
func (c *ClientWithResponses) AddTasteForGroupGroupsGroupIdTastesGenreIdPostWithResponse(ctx context.Context, groupId int, genreId int, reqEditors ...RequestEditorFn) (*AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse, error) {
	rsp, err := c.AddTasteForGroupGroupsGroupIdTastesGenreIdPost(ctx, groupId, genreId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse(rsp)
}

// GetGroupUsersGroupsGroupIdUsersGetWithResponse request returning *GetGroupUsersGroupsGroupIdUsersGetResponse
func (c *ClientWithResponses) GetGroupUsersGroupsGroupIdUsersGetWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetGroupUsersGroupsGroupIdUsersGetResponse, error) {
	rsp, err := c.GetGroupUsersGroupsGroupIdUsersGet(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupUsersGroupsGroupIdUsersGetResponse(rsp)
}

// RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteWithResponse request returning *RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse
func (c *ClientWithResponses) RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteWithResponse(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse, error) {
	rsp, err := c.RemoveUserFromGroupGroupsGroupIdUsersUserIdDelete(ctx, groupId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse(rsp)
}

// AddUserToGroupGroupsGroupIdUsersUserIdPostWithResponse request returning *AddUserToGroupGroupsGroupIdUsersUserIdPostResponse
func (c *ClientWithResponses) AddUserToGroupGroupsGroupIdUsersUserIdPostWithResponse(ctx context.Context, groupId int, userId int, reqEditors ...RequestEditorFn) (*AddUserToGroupGroupsGroupIdUsersUserIdPostResponse, error) {
	rsp, err := c.AddUserToGroupGroupsGroupIdUsersUserIdPost(ctx, groupId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserToGroupGroupsGroupIdUsersUserIdPostResponse(rsp)
}

// CreateUserUsersPostWithResponse request returning *CreateUserUsersPostResponse
func (c *ClientWithResponses) CreateUserUsersPostWithResponse(ctx context.Context, params *CreateUserUsersPostParams, reqEditors ...RequestEditorFn) (*CreateUserUsersPostResponse, error) {
	rsp, err := c.CreateUserUsersPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserUsersPostResponse(rsp)
}

// GetUserInfosByMailUsersEmailBymailGetWithResponse request returning *GetUserInfosByMailUsersEmailBymailGetResponse
func (c *ClientWithResponses) GetUserInfosByMailUsersEmailBymailGetWithResponse(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*GetUserInfosByMailUsersEmailBymailGetResponse, error) {
	rsp, err := c.GetUserInfosByMailUsersEmailBymailGet(ctx, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfosByMailUsersEmailBymailGetResponse(rsp)
}

// RemoveUserUsersUserIdDeleteWithResponse request returning *RemoveUserUsersUserIdDeleteResponse
func (c *ClientWithResponses) RemoveUserUsersUserIdDeleteWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*RemoveUserUsersUserIdDeleteResponse, error) {
	rsp, err := c.RemoveUserUsersUserIdDelete(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserUsersUserIdDeleteResponse(rsp)
}

// GetUserInfosUsersUserIdGetWithResponse request returning *GetUserInfosUsersUserIdGetResponse
func (c *ClientWithResponses) GetUserInfosUsersUserIdGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserInfosUsersUserIdGetResponse, error) {
	rsp, err := c.GetUserInfosUsersUserIdGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfosUsersUserIdGetResponse(rsp)
}

// AddUserInfosUsersUserIdPostWithResponse request returning *AddUserInfosUsersUserIdPostResponse
func (c *ClientWithResponses) AddUserInfosUsersUserIdPostWithResponse(ctx context.Context, userId int, params *AddUserInfosUsersUserIdPostParams, reqEditors ...RequestEditorFn) (*AddUserInfosUsersUserIdPostResponse, error) {
	rsp, err := c.AddUserInfosUsersUserIdPost(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserInfosUsersUserIdPostResponse(rsp)
}

// GetSeenMoviesUsersUserIdMoviesGetWithResponse request returning *GetSeenMoviesUsersUserIdMoviesGetResponse
func (c *ClientWithResponses) GetSeenMoviesUsersUserIdMoviesGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetSeenMoviesUsersUserIdMoviesGetResponse, error) {
	rsp, err := c.GetSeenMoviesUsersUserIdMoviesGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeenMoviesUsersUserIdMoviesGetResponse(rsp)
}

// RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteWithResponse request returning *RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse
func (c *ClientWithResponses) RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteWithResponse(ctx context.Context, userId int, movieId int, reqEditors ...RequestEditorFn) (*RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse, error) {
	rsp, err := c.RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDelete(ctx, userId, movieId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse(rsp)
}

// AddMovieToWatchedUsersUserIdMoviesMovieIdPostWithResponse request returning *AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse
func (c *ClientWithResponses) AddMovieToWatchedUsersUserIdMoviesMovieIdPostWithResponse(ctx context.Context, userId int, movieId int, params *AddMovieToWatchedUsersUserIdMoviesMovieIdPostParams, reqEditors ...RequestEditorFn) (*AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse, error) {
	rsp, err := c.AddMovieToWatchedUsersUserIdMoviesMovieIdPost(ctx, userId, movieId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse(rsp)
}

// GetRecommendationsUsersUserIdRecommendationsGetWithResponse request returning *GetRecommendationsUsersUserIdRecommendationsGetResponse
func (c *ClientWithResponses) GetRecommendationsUsersUserIdRecommendationsGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetRecommendationsUsersUserIdRecommendationsGetResponse, error) {
	rsp, err := c.GetRecommendationsUsersUserIdRecommendationsGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecommendationsUsersUserIdRecommendationsGetResponse(rsp)
}

// AddRecommendationsUsersUserIdRecommendationsPostWithResponse request returning *AddRecommendationsUsersUserIdRecommendationsPostResponse
func (c *ClientWithResponses) AddRecommendationsUsersUserIdRecommendationsPostWithResponse(ctx context.Context, userId int, params *AddRecommendationsUsersUserIdRecommendationsPostParams, reqEditors ...RequestEditorFn) (*AddRecommendationsUsersUserIdRecommendationsPostResponse, error) {
	rsp, err := c.AddRecommendationsUsersUserIdRecommendationsPost(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRecommendationsUsersUserIdRecommendationsPostResponse(rsp)
}

// GetTastesUsersUserIdTastesGetWithResponse request returning *GetTastesUsersUserIdTastesGetResponse
func (c *ClientWithResponses) GetTastesUsersUserIdTastesGetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetTastesUsersUserIdTastesGetResponse, error) {
	rsp, err := c.GetTastesUsersUserIdTastesGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTastesUsersUserIdTastesGetResponse(rsp)
}

// RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteWithResponse request returning *RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse
func (c *ClientWithResponses) RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteWithResponse(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse, error) {
	rsp, err := c.RemoveTasteFromUserUsersUserIdTastesGenreIdDelete(ctx, userId, genreId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse(rsp)
}

// AddTasteForUserUsersUserIdTastesGenreIdPostWithResponse request returning *AddTasteForUserUsersUserIdTastesGenreIdPostResponse
func (c *ClientWithResponses) AddTasteForUserUsersUserIdTastesGenreIdPostWithResponse(ctx context.Context, userId int, genreId int, reqEditors ...RequestEditorFn) (*AddTasteForUserUsersUserIdTastesGenreIdPostResponse, error) {
	rsp, err := c.AddTasteForUserUsersUserIdTastesGenreIdPost(ctx, userId, genreId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTasteForUserUsersUserIdTastesGenreIdPostResponse(rsp)
}

// ParseCreateGroupGroupsPostResponse parses an HTTP response from a CreateGroupGroupsPostWithResponse call
func ParseCreateGroupGroupsPostResponse(rsp *http.Response) (*CreateGroupGroupsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupGroupsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetGroupInfosGroupsGroupIdGetResponse parses an HTTP response from a GetGroupInfosGroupsGroupIdGetWithResponse call
func ParseGetGroupInfosGroupsGroupIdGetResponse(rsp *http.Response) (*GetGroupInfosGroupsGroupIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupInfosGroupsGroupIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse parses an HTTP response from a GetGroupRecommendationsGroupsGroupIdRecommendationsGetWithResponse call
func ParseGetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse(rsp *http.Response) (*GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRecommendationsGroupsGroupIdRecommendationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieReccomendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse parses an HTTP response from a AddGroupRecommendationsGroupsGroupIdRecommendationsPostWithResponse call
func ParseAddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse(rsp *http.Response) (*AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddGroupRecommendationsGroupsGroupIdRecommendationsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetGroupTastesGroupsGroupIdTastesGetResponse parses an HTTP response from a GetGroupTastesGroupsGroupIdTastesGetWithResponse call
func ParseGetGroupTastesGroupsGroupIdTastesGetResponse(rsp *http.Response) (*GetGroupTastesGroupsGroupIdTastesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupTastesGroupsGroupIdTastesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GenreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse parses an HTTP response from a RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteWithResponse call
func ParseRemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse(rsp *http.Response) (*RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTasteFromGroupGroupsGroupIdTastesGenreIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse parses an HTTP response from a AddTasteForGroupGroupsGroupIdTastesGenreIdPostWithResponse call
func ParseAddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse(rsp *http.Response) (*AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTasteForGroupGroupsGroupIdTastesGenreIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetGroupUsersGroupsGroupIdUsersGetResponse parses an HTTP response from a GetGroupUsersGroupsGroupIdUsersGetWithResponse call
func ParseGetGroupUsersGroupsGroupIdUsersGetResponse(rsp *http.Response) (*GetGroupUsersGroupsGroupIdUsersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupUsersGroupsGroupIdUsersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse parses an HTTP response from a RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteWithResponse call
func ParseRemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse(rsp *http.Response) (*RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddUserToGroupGroupsGroupIdUsersUserIdPostResponse parses an HTTP response from a AddUserToGroupGroupsGroupIdUsersUserIdPostWithResponse call
func ParseAddUserToGroupGroupsGroupIdUsersUserIdPostResponse(rsp *http.Response) (*AddUserToGroupGroupsGroupIdUsersUserIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserToGroupGroupsGroupIdUsersUserIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateUserUsersPostResponse parses an HTTP response from a CreateUserUsersPostWithResponse call
func ParseCreateUserUsersPostResponse(rsp *http.Response) (*CreateUserUsersPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserUsersPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserInfosByMailUsersEmailBymailGetResponse parses an HTTP response from a GetUserInfosByMailUsersEmailBymailGetWithResponse call
func ParseGetUserInfosByMailUsersEmailBymailGetResponse(rsp *http.Response) (*GetUserInfosByMailUsersEmailBymailGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfosByMailUsersEmailBymailGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveUserUsersUserIdDeleteResponse parses an HTTP response from a RemoveUserUsersUserIdDeleteWithResponse call
func ParseRemoveUserUsersUserIdDeleteResponse(rsp *http.Response) (*RemoveUserUsersUserIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserUsersUserIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserInfosUsersUserIdGetResponse parses an HTTP response from a GetUserInfosUsersUserIdGetWithResponse call
func ParseGetUserInfosUsersUserIdGetResponse(rsp *http.Response) (*GetUserInfosUsersUserIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfosUsersUserIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddUserInfosUsersUserIdPostResponse parses an HTTP response from a AddUserInfosUsersUserIdPostWithResponse call
func ParseAddUserInfosUsersUserIdPostResponse(rsp *http.Response) (*AddUserInfosUsersUserIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserInfosUsersUserIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSeenMoviesUsersUserIdMoviesGetResponse parses an HTTP response from a GetSeenMoviesUsersUserIdMoviesGetWithResponse call
func ParseGetSeenMoviesUsersUserIdMoviesGetResponse(rsp *http.Response) (*GetSeenMoviesUsersUserIdMoviesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeenMoviesUsersUserIdMoviesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse parses an HTTP response from a RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteWithResponse call
func ParseRemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse(rsp *http.Response) (*RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMovieFromWatchedUsersUserIdMoviesMovieIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse parses an HTTP response from a AddMovieToWatchedUsersUserIdMoviesMovieIdPostWithResponse call
func ParseAddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse(rsp *http.Response) (*AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMovieToWatchedUsersUserIdMoviesMovieIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetRecommendationsUsersUserIdRecommendationsGetResponse parses an HTTP response from a GetRecommendationsUsersUserIdRecommendationsGetWithResponse call
func ParseGetRecommendationsUsersUserIdRecommendationsGetResponse(rsp *http.Response) (*GetRecommendationsUsersUserIdRecommendationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecommendationsUsersUserIdRecommendationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieReccomendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddRecommendationsUsersUserIdRecommendationsPostResponse parses an HTTP response from a AddRecommendationsUsersUserIdRecommendationsPostWithResponse call
func ParseAddRecommendationsUsersUserIdRecommendationsPostResponse(rsp *http.Response) (*AddRecommendationsUsersUserIdRecommendationsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRecommendationsUsersUserIdRecommendationsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTastesUsersUserIdTastesGetResponse parses an HTTP response from a GetTastesUsersUserIdTastesGetWithResponse call
func ParseGetTastesUsersUserIdTastesGetResponse(rsp *http.Response) (*GetTastesUsersUserIdTastesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTastesUsersUserIdTastesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GenreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse parses an HTTP response from a RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteWithResponse call
func ParseRemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse(rsp *http.Response) (*RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTasteFromUserUsersUserIdTastesGenreIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddTasteForUserUsersUserIdTastesGenreIdPostResponse parses an HTTP response from a AddTasteForUserUsersUserIdTastesGenreIdPostWithResponse call
func ParseAddTasteForUserUsersUserIdTastesGenreIdPostResponse(rsp *http.Response) (*AddTasteForUserUsersUserIdTastesGenreIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTasteForUserUsersUserIdTastesGenreIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
